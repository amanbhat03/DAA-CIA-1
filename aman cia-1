THEORY:-

Prim's algorithm is used to determine the mst of a graph using a vertex based approach
Kruskal's algorithm is used to determine the mst of a graph using an edge based approach
Dijkstra's algorithm is used to calculate the shortest path from the source to all the other points in the graph
All these algorithms follow the greedy approach
Prim's and Kruskal's fail to work for a directed graph, hence we cannot use them for the given case 
Prim’s algorithm assumes that all vertices are connected, but in a directed graph, every node is not reachable from every other node hence it fails
Kruskal’s algorithm fails to detect the cycles in a directed graph as there are cases when there is no cycle between the vertices but it assumes to be a cycle and don’t consider some edges due to which it fails
Dijkstra's algorithm works for both directed and undirected graph and also works with negative and non-negative weights, but negative weights will cause this algorithm to produce inaccurate results
In this case, since the given graph is a directed and negative weighted consisting of only one cycle of negative values, we can use Dijkstra's algorithm 
Required matrix, i = infinity
     B   C   D   E
0    i   i   i   i
0    4   2   i   i
0    3   2   6   6
0    3   2   1   6
0    3   2   1   6
The coding language used here is python, as it is an easy language to code in and to understand


CODE:-

class Graph:
    def __init__(self, vertices):
        self.V = vertices  
        self.graph = []     

    
    def add_edge(self, s, d, w):
        self.graph.append([s, d, w])

    
    def print_solution(self, dist):
        print("Vertex Distance from Source")
        for i in range(self.V):
            print("{0}\t\t{1}".format(i, dist[i]))

    def dijkstra(self, src):

        
        dist = [float("Inf")] * self.V
        dist[src] = 0

       
        for _ in range(self.V - 1):
            for s, d, w in self.graph:
                if dist[s] != float("Inf") and dist[s] + w < dist[d]:
                    dist[d] = dist[s] + w

        
        for s, d, w in self.graph:
            if dist[s] != float("Inf") and dist[s] + w < dist[d]:
                print("Graph contains negative weight cycle")
                return

    
        self.print_solution(dist)


g = Graph(5)
g.add_edge(0, 1, 5)
g.add_edge(0, 2, 4)
g.add_edge(1, 3, 3)
g.add_edge(2, 1, 6)
g.add_edge(3, 2, 2)

g.dijkstra(0)

Output:-
Vertex Distance from Source
0		0
1		5
2		4
3		8
4		inf
